/**
 * An API for authenticating from apps.
 * @public
 */
export declare interface Authentication {
    /**
     * Starts an authentication flow.
     *
     * @param options - Options for configuring the authentication flow.
     * @returns Detailed information about the result of the attempted authentication.
     *
     * @remarks
     * This API method takes an optional param called "context" â€“ a custom,
     * developer-specified string of up to 32 characters.
     *
     * This parameter is designed for use when the app's backend needs
     * additional contextual information from its frontend to authenticate.
     * It is appended to the Redirect URL and transferred openly, so it
     * must not store sensitive information, user data, tokens, secrets,
     * or anything that is not required or directly related to making
     * authentication-related decisions.
     *
     * Possible use cases are
     * - The app authenticates with a third-party service with multiple
     * authentication endpoints or custom domains. E.g., it is a self-managed
     * web app like GitLab that organizations can host on custom domains.
     * - For authentication with a third party, the app needs to set different
     * OAuth 2.0 settings based on the user's choice or actions in the app.
     * E.g., the app may request access to a minimal set of API scopes
     * initially and re-run the authentication to upgrade the token for
     * accessing more API scopes later.
     */
    authenticate: (options?: AuthenticationOptions) => Promise<AuthenticationResult>;
    /**
     * Returns a JWT for authentication with your backend
     *
     * @returns The token
     *
     * @remarks
     * When successful, this method returns a token generated by Canva, to be used by your application
     * to authenticate with your backend. Canva manages the secrets used to generate this
     * token as well as the lifetime and expiry.
     *
     * Always call this method whenever you need a token. The token is cached by Canva on the frontend,
     * so there is no need to cache the token in your application.
     *
     * The token should be added to the 'Authorization' header on your requests with the 'Bearer' prefix.
     *
     * When decoded, the token contains the following fields:
     *   "userId"  - Unique User ID
     *   "brandId" - Unique Brand ID
     *
     *  With the fields described above, your backend application will be able to uniquely identify
     *  your app, what user and the current brand of that user.
     */
    getCanvaUserToken: () => Promise<CanvaUserToken>;
}

/**
 * @public
 * The result of a cancelled authentication flow.
 *
 * @remarks
 * An authentication flow is considered cancelled when a user closes
 * the authentication popup window.
 *
 * This is a subtype of the {@link AuthenticationResult} type.
 */
export declare type AuthenticationCanceled = {
    readonly type: 'canceled';
};

/**
 * @public
 * The result of an authentication flow when the user hasn't provided the app
 * with the required permissions to complete the authentication flow.
 *
 * @param details - An array of custom error codes, provided by the app. If
 * the app doesn't provide any error codes, the array is empty.
 *
 * @remarks
 * This result is returned if the app redirects the user back to Canva and:
 *
 * - Sets the `success` query string parameter to "false"
 * - Includes an `errors` query string parameter with a comma-separated list of errors
 *
 * This is a subtype of the {@link AuthenticationResult} type.
 */
export declare type AuthenticationDenied = {
    readonly type: 'denied';
    readonly details: readonly string[];
};

/**
 * @public
 * The result of an authentication flow when a non-recoverable error has occurred.
 *
 * @param reason - An object that contains information about the error.
 *
 * @remarks
 * This is a subtype of the {@link AuthenticationResult} type.
 */
export declare type AuthenticationFailed = {
    readonly type: 'failed';
    readonly reason: AuthenticationFailureReason;
};

/**
 * @public
 * The reasons an authentication flow may fail.
 *
 * @remarks
 * This is a subtype of the {@link AuthenticationFailed} type.
 */
export declare type AuthenticationFailureReason = InvalidOptions | InvalidContextParameter | SignatureVerificationError | PopupIsNotAvailable | InvalidRedirectParameters | InvalidRedirectUrl | UserIsOffline | UnknownError;

/**
 * @public
 * Options for configuring the authentication flow.
 *
 * @remarks
 * These options are accepted by the {@link Authentication.authenticate} method.
 */
export declare type AuthenticationOptions = {
    /**
     * A value to append to the Redirect URL via a `context` query parameter, allowing
     * apps to pass arbitrary information to their backend.
     *
     * @remarks
     * Some examples of possible use-cases include:
     *
     * - The app authenticates with a third-party service that supports multiple authentication
     * endpoints or custom domains. For example, a self-managed app like GitLab that organizations
     * can host on their own domain.
     * - The app needs to set different authentication permissions based on the user's actions in
     * the app. For example, the app may request access to a minimal set of scopes but allow the user
     * to re-run the authentication flow to access additional scopes at a later time.
     *
     * This parameter must not contain sensitive information, such as user data or tokens,
     * or anything that is not required to implement authentication-related features.
     *
     * The length of the string must not exceed 32 characters.
     */
    context?: string;
};

/**
 * @public
 * The result of an authentication flow.
 *
 * @remarks
 * This type is returned by the {@link Authentication.authenticate} method.
 */
export declare type AuthenticationResult = AuthenticationSucceeded | AuthenticationCanceled | AuthenticationDenied | AuthenticationFailed;

/**
 * @public
 * The result of a successful authentication flow.
 *
 * @remarks
 * This is a subtype of the {@link AuthenticationResult} type.
 */
export declare type AuthenticationSucceeded = {
    readonly type: 'authenticated';
};

/**
 * @public
 * CanvaUserToken is the token that should be added to the headers on backend fetch requests
 *
 * @remarks
 * This is an alias of the string type.
 */
export declare type CanvaUserToken = string & {
    __canvaUserToken: never;
};

export declare function getAuthentication(): Authentication;

/**
 * @public
 * An error that occurs if the value of the `context` property is invalid.
 *
 * @remarks
 * This is a subtype of the {@link AuthenticationFailureReason} type.
 */
export declare type InvalidContextParameter = {
    readonly type: 'invalid_context';
};

/**
 * @public
 * An error that occurs if the provided options for the {@link Authentication.authenticate}
 * method are invalid.
 *
 * @remarks
 * This is a subtype of the {@link AuthenticationFailureReason} type.
 */
export declare type InvalidOptions = {
    readonly type: 'invalid_options';
};

/**
 * @public
 * An error that occurs if the required query string parameters are invalid when
 * redirecting back to Canva at the end of an authentication flow.
 *
 * @remarks
 * The query string parameters are invalid if any of the following things are true:
 *
 * - The `state` parameter is missing.
 * - The `success` parameter is missing.
 * - The `success` parameter is not "true" or "false".
 *
 * This is a subtype of the {@link AuthenticationFailureReason} type.
 */
export declare type InvalidRedirectParameters = {
    readonly type: 'invalid_redirect_parameters';
};

/**
 * @public
 * An error that occurs if the app's Redirect URL is invalid.
 *
 * @remarks
 * The Redirect URL may be considered invalid if it exceeds 2048 characters. This is a
 * limitation of some web browsers. Be aware that, even if the original Redirect URL has
 * a valid length, the parameters that Canva appends may cause it to exceed this length.
 *
 * This is a subtype of the {@link AuthenticationFailureReason} type.
 */
export declare type InvalidRedirectUrl = {
    readonly type: 'invalid_redirect_url';
};

/**
 * @public
 * An error that occurs if Canva fails to open the authentication popup window.
 *
 * @remarks
 * This error is usually caused by the browser blocking the popup window.
 *
 * This is a subtype of the {@link AuthenticationFailureReason} type.
 */
export declare type PopupIsNotAvailable = {
    readonly type: 'popup_is_not_available';
};

/**
 * @public
 * An error that occurs if the app's Redirect URL doesn't implement signature
 * verification correctly.
 *
 * @param details - A list of error codes that describe why the signature
 * verification tests have failed.
 *
 * This is a subtype of the {@link AuthenticationFailureReason} type.
 */
export declare type SignatureVerificationError = {
    readonly type: 'signature_verification_failed';
    readonly details: readonly ('invalid_signature' | 'invalid_timestamp' | 'invalid_mixed_signature')[];
};

/**
 * @public
 * An error that occurs when something unexpected happens, such as an internal Canva error.
 *
 * @remarks
 * This is a subtype of the {@link AuthenticationFailureReason} type.
 */
export declare type UnknownError = {
    readonly type: 'unknown';
};

/**
 * @public
 * An error that occurs if the user tries to start an authentication flow while offline.
 *
 * @remarks
 * This is a subtype of the {@link AuthenticationFailureReason} type.
 */
export declare type UserIsOffline = {
    readonly type: 'offline';
};

export { }
