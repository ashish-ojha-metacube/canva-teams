require("dotenv").config();
import * as express from "express";
import * as cors from "cors";
import * as basicAuth from "express-basic-auth";
import { JSONFileDatabase } from "./database";
import { createBaseServer } from "../../../utils/backend/base_backend/create";
import { createJwtMiddleware } from "../../../utils/backend/jwt_middleware";

/**
 * This file contains routes for demonstrating the authentication demo. You can
 * find the frontend of this demo in app/src/examples/authentication.tsx.
 */

/**
 * These are the hard-coded credentials for this example.
 */
const USERNAME = "username";
const PASSWORD = "Password";

type Data = {
  users: string[];
};

type TokenData = {
  token: string[];
};

async function main() {
  // add your CANVA_APP_ID to the .env file at the root level
  const APP_ID = process.env.CANVA_APP_ID;
  if (!APP_ID) {
    throw new Error("'CANVA_APP_ID' environment variable is undefined");
  }

  /**
   * Set up a database with a "users" table. In this example code, the
   * database is simply a JSON file.
   */
  const db = new JSONFileDatabase<Data>({ users: [] });

  const router = express.Router();

  /**
   * TODO: Configure your CORS Policy
   *
   * Cross-Origin Resource Sharing ([CORS](https://developer.mozilla.org/en-US/docs/Glossary/CORS)) is
   * an [HTTP](https://developer.mozilla.org/en-US/docs/Glossary/HTTP)-header based mechanism that allows
   * a server to indicate any [origins](https://developer.mozilla.org/en-US/docs/Glossary/Origin)
   * (domain, scheme, or port) other than its own from which a browser should permit loading resources.
   *
   * A basic CORS configuration would include your backends domain such as in the following example:
   * const corsOptions = {
   *   origin: 'http://example.com',
   *   optionsSuccessStatus: 200
   * }
   *
   * https://www.npmjs.com/package/cors#configuring-cors
   *
   * You may need to include multiple permissible origins, or dynamic origins based on the environment
   * in which the server is running. Further information can be found [here](https://www.npmjs.com/package/cors#configuring-cors-w-dynamic-origin).
   */
  router.use(cors());

  /**
   * This endpoint renders a login page. Once the user logs in, they're
   * redirected back to Canva, which completes the authentication flow.
   */
  router.get(
    "/redirect-url",
    /**
     * Warning: For demonstration purposes, we're using basic authentication and hard-
     * coding a username and password. This is not a production-ready solution!
     */
    basicAuth({
      users: { [USERNAME]: PASSWORD },
      challenge: true,
    }),
    async (req, res) => {
      // Get the user's ID from the query parameters
      const { user } = req.query;
      if (typeof user !== "string") {
        console.error(
          `user field in query parameters: expected 'string' but found '${typeof user}'`
        );
        res.status(400).send({});
        return;
      }

      // Load the database
      const data = await db.read();

      // Add the user to the database
      if (!data.users.includes(user)) {
        data.users.push(user);
        await db.write(data);
      }

      // Create query parameters for redirecting back to Canva
      const params = new URLSearchParams({
        success: "true",
        state: req?.query?.state?.toString() || "",
      });

      // Redirect the user back to Canva
      res.redirect(302, `https://canva.com/apps/configured?${params}`);
    }
  );

  /**
   * This endpoint is called when a user disconnects an app from their account. The app
   * is expected to de-authenticate the user on its backend, so if the user reconnects the
   * app, they'll need to re-authenticate.
   *
   * Note: The name of the endpoint is *not* configurable.
   *
   * Note: This endpoint is called by Canva's backend directly and must be exposed via a public URL.
   * To test this endpoint, add a proxy URL, such as one generated by nGrok, to the 'Add authentication'
   * section in the Developer Portal. Localhost addresses will not work to test this endpoint.
   */
  router.post("/configuration/delete", async (req, res) => {
    // Get the user's ID from the request body
    const { user } = req.body;

    // Load the database
    const data = await db.read();

    // Remove the user from the database
    await db.write({
      users: data.users.filter((userId) => userId !== user),
    });

    // Confirm that the user was removed
    res.send({
      type: "SUCCESS",
    });
  });

  /**
   * Ensure that this middleware is added to ALL the routes that you access from
   * your app
   */
  const jwtMiddleware = createJwtMiddleware();
  router.use(jwtMiddleware);

  /**
   * This endpoint checks if a user is authenticated.
   */
  router.post("/authentication/check", async (req, res) => {
    // Load the database
    const data = await db.read();

    // Check if the user is authenticated
    const isAuthenticated = data.users.includes(req.canva.userId);

    // Return the authentication status
    res.send({
      isAuthenticated,
    });
  });

  const server = createBaseServer(router);
  server.start(process.env.CANVA_BACKEND_PORT);
}

main();
